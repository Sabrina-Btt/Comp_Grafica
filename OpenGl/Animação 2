#include <GL/glew.h>
#include <GL/freeglut.h>
#include <chrono>
#include <cmath>
#include "matrix.h"
#include "Color.h"
#include "GLutils.h"



VAO vao;
GLBuffer vbo, ebo;
mat4 Projection, View, Model;
int choice = 1;
int temp=0;


///Vetor contendo os eixos de rotação dos membros
vector<vec3> eixosRot={
    {2, 6, 1}, {4, 5, 1.625}, {0, 5, 1.625}, {4, 2.25, 1.625}, {0, 2.25, 1.625}, {0.5, 0.25, 1.625},
    {2.25, 0.25, 1.625}, {0.5, -2.5, 1.625}, {2.25, -2.5, 1.625}
    };


///Estrutura que possui características do nosso personagem, como velocidade e sentido dos movimentos
struct anim{
    float velX,velY,velZ,constRotH,constRotR;
    double tempo = 0,t=0;
    float qntRotH,qntRotR;
    float temporizador = 1;
    float temporizadorR = 0;
    int sentido = 1;
    int sentidoR = 1;
    double ultimoTempo;
}typedef Animacao;
Animacao a;


///Função para calcular a quantidade de movimento (incluindo as rotações)
void setposition(float deltaX, float deltaY,float deltaZ,float gRotH,float gRotR,float tempo,Animacao& anim  ){
    anim.velX=(deltaX/tempo);
    anim.velY=(deltaY/tempo);
    anim.velZ=(deltaZ/tempo);
    float p = M_PI*gRotH/180;
    float p1 = M_PI*gRotR/180;
    anim.constRotH=p/60;
    anim.constRotR=p1/60;
    a.ultimoTempo = 0.0;
}

///Função para resetar a posição do personagem na troca de visões
void resetPosition(Animacao& a, float tempo){
    a.tempo = 0;
    a.temporizador = 1;
    a.temporizadorR = 0;
    a.sentido = 1;
    a.sentidoR = 1;
    a.ultimoTempo = tempo;
    a.qntRotH=0;
    a.qntRotR=0;
    temp=0;
}

///Função para cálculo de rotações
mat4 rotacao(vec3 v, float theta, char op){
    mat4 rot;
    switch(op){
        case'x':{
            rot = translate(v.x,v.y,v.z)*rotate_x(theta)*translate(-v.x,-v.y,-v.z);
            break;
        }
        case'y':{
            rot = translate(v.x,v.y,v.z)*rotate_y(theta)*translate(-v.x,-v.y,-v.z);
            break;
        }
        case'z':{
            rot = translate(v.x,v.y,v.z)*rotate_z(theta)*translate(-v.x,-v.y,-v.z);
            break;
        }
    } return rot;
}


void init(){
	glewInit();

	ShaderProgram shaderProgram{
		Shader{"SimpleShader.vert", GL_VERTEX_SHADER},
		Shader{"SimpleShader.frag", GL_FRAGMENT_SHADER}
	};
	glUseProgram(shaderProgram);

	vector<vec3> V = {
        {0, 0, 0},
        {1, 0, 0},
        {1, 1, 0},
        {0, 1, 0},
        {0, 0, 1},
        {1, 0, 1},
        {1, 1, 1},
        {0, 1, 1},
    };
	vector<unsigned int> indices = {
		0, 1,    1, 2,    2, 3,    3, 0,    4, 5,    5, 6,
        6, 7,    7, 4,    0, 4,    1, 5,    2, 6,    3, 7
	};

	vao = VAO{true};
	glBindVertexArray(vao);

	vbo = GLBuffer{GL_ARRAY_BUFFER};
	vbo.data(V, GL_STATIC_DRAW);

	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);

	ebo = GLBuffer{GL_ELEMENT_ARRAY_BUFFER};
	ebo.data(indices, GL_STATIC_DRAW);

	setposition(0,0,30,90,45,5,a);

}

void draw_cube(){
	Uniform{"M"} = Projection*View*Model;

	glBindVertexArray(vao);
	glDrawElements(GL_LINES, 24, GL_UNSIGNED_INT, 0);
}

float get_time(){
	using namespace std::chrono;
	static auto start = high_resolution_clock::now();
	duration<float> dif = high_resolution_clock::now() - start;
	return dif.count();
}

///Função para calcular o movimento do nosso personagem, recebemos como parâmetro o vetor com os membros e a
///própria animação
vector<mat4> movimento(vector<mat4> base, Animacao& a){
    if(a.temporizador == 2){    //O temporizador checa se o movimento de rotação está completo, caso esteja,
            a.sentido*=-1;      //o sentido da rotação é invertido. Vale ressaltar que o movimento completo
            a.temporizador=0;   //dura 2 segundos
        }

    if(a.temporizadorR == 2){    //O temporizador de rotação possui a mesma função do tamporizador, porém é
            a.sentidoR*=-1;      //específico para os braços e pernas do personagem pois o movimento de rotação
            a.temporizadorR=0;   //ocorre em instantes de tempo diferentes
        }

    a.qntRotH += a.constRotH*a.sentido;
    a.qntRotR += a.constRotR*a.sentido;
     vector<mat4> mov {
        ///Cabeça
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[0], a.qntRotH, 'y'),
        ///Corpo
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo),
        ///Braço direito
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[1], a.qntRotR, 'x'),
        ///Braço esquerdo
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[2], -a.qntRotR, 'x'),
        ///Ante-Braço direito
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[3], (-a.qntRotR/4)*a.sentidoR, 'x')*rotacao(eixosRot[1], a.qntRotR, 'x'),
        ///Ante-Braço esquerdo
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[4], (-a.qntRotR/4)*a.sentidoR, 'x')*rotacao(eixosRot[2], -a.qntRotR, 'x'),
        ///Perna esquerda
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[5], a.qntRotR, 'x'),
        ///Perna direita
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[6], -a.qntRotR, 'x'),
        ///Canela esquerda
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[7], (a.qntRotR/3)*a.sentidoR, 'x')*rotacao(eixosRot[5], a.qntRotR, 'x'),
        ///Canela direita
        translate(a.velX*a.tempo,a.velY*a.tempo,a.velZ*a.tempo)*rotacao(eixosRot[8], (a.qntRotR/3)*a.sentidoR, 'x')*rotacao(eixosRot[6], -a.qntRotR, 'x')
    };

    vector<mat4> m;
    for(int i=0;i<base.size();i++){
        m.push_back(mov[i]*base[i]);
    }
    return m;
}

void idle(int){
	glutPostRedisplay();
	glutTimerFunc(1000/60, idle, 0);
}



void desenha(){
	glClearColor(1, 1, 1, 1);
	glClear(GL_COLOR_BUFFER_BIT);


	vector<mat4> base = {
    ///Cabeça
    translate(0.75,6,-0.25)*scale(2.5,2.5,2.5),

    ///Corpo
    scale(4,6,2),

    ///Braço direito
    translate(4,2, 0.375)*scale(1.25,3,1.25),

    ///Braço esquerdo
    translate(-1.25, 2, 0.375)*scale(1.25,3,1.25),

    ///Ante-Braço direito
    rotacao({4,2,0},-0.3,'x')*translate(4, -1.75, 0.375)*scale(1.25,4,1.25),

    ///Ante-Braço esquerdo
    rotacao({-1.25,2,0},-0.3,'x')*translate(-1.25, -1.75, 0.375)*scale(1.25,4,1.25),

    ///Perna esquerda
    translate(0.5,-2.75,0.375)*scale(1.25,3,1.25),

    ///Perna direita
    translate(2.25,-2.75,0.375)*scale(1.25,3,1.25),

    ///Canela esquerda
    translate(0.5,-6.5,0.375)*scale(1.25,4,1.25),

    ///Canela direita
    translate(2.25,-6.5,0.375)*scale(1.25,4,1.25)
    };

	float duration = 5;
    a.tempo = (get_time() - a.ultimoTempo);
    if(floor(a.tempo)!= temp ){
        temp++;
        a.temporizador++;
        a.temporizadorR++;
    }


	Uniform{"C"} = toVec3(blue);

	switch(choice){
        case 1:{
           View = lookAt({0, 0, 1}, {0, 0, 0}, {0, 1, 0});
           Projection = orthogonal(-10, 10, -10, 10, -10, 10);
           break;
        }
        case 2:{
            View = lookAt({1, 0, 0}, {0, 0, 0}, {0, 1, 0});
            Projection = orthogonal(-10, 10, -10, 10, -10, 10);
            break;
        }
        case 3:{
            View = lookAt({10, 5, 10}, {0, 0, 0}, {0, 1, 0});
            float a = 800/(float)600;
            Projection = perspective(45, a, 5, 50);
            break;
        }
    }

    ///Chão
    vector<mat4> chao;
    for(int x=0;x<10;x=x+2){
        for(int z=0;z<10;z=z+2){
            chao.push_back(translate(x,-3.5,z)*scale(2,0.2,2));
            chao.push_back(translate(-x-2,-3.5,-z-2)*scale(2,0.2,2));
            chao.push_back(translate(x,-3.5,-z-2)*scale(2,0.2,2));
            chao.push_back(translate(-x-2,-3.5,z)*scale(2,0.2,2));
        }
    }
    for(int i=0;i<chao.size();i++){
        Model = chao[i];
        draw_cube();
    }

    ///Corpo
    vector<mat4> m = movimento(base,a);
    for(int i=0; i<m.size(); i++){
        m[i]=translate(-1,0,-8)*scale(0.5,0.5,0.5)*m[i];
        Model = m[i];
        draw_cube();
    }
	glutSwapBuffers();
	if(a.tempo>duration){
        resetPosition(a,get_time());
	}

}


void keyboard(unsigned char c, int x, int y){
	if(c == '1') choice = 1;
	else if(c == '2') choice = 2;
    else if(c == '3') choice = 3;
    resetPosition(a, get_time());
}

int main(int argc, char* argv[]){
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_MULTISAMPLE);
	glutInitWindowSize(800, 600);
	glutInitContextVersion(3, 3);
	glutInitContextProfile(GLUT_CORE_PROFILE);
	glutCreateWindow("janela");
	glutDisplayFunc(desenha);
	idle(0);
	glutKeyboardFunc(keyboard);

	printf("GL Version: %s\n", glGetString(GL_VERSION));
	printf("GLSL Version: %s\n", glGetString(GL_SHADING_LANGUAGE_VERSION));

	init();
	glutMainLoop();
}

