#include "Graphics3D.h"
#include "vec.h"
#include "SimpleShader.h"


mat4 rotacao(float x, float y, float z, float theta, char op){
    mat4 rot;
    switch(op){
        case'x':{
            rot = translate(x,y,z)*rotate_x(theta)*translate(-x,-y,-z);
            break;
        }
        case'y':{
            rot = translate(x,y,z)*rotate_y(theta)*translate(-x,-y,-z);
            break;
        }
        case'z':{
            rot = translate(x,y,z)*rotate_z(theta)*translate(-x,-y,-z);
            break;
        }
    } return rot;
}



int main(){

	vector<vec3> V = {
        {0, 0, 0},
        {1, 0, 0},
        {1, 1, 0},
        {0, 1, 0},
        {0, 0, 1},
        {1, 0, 1},
        {1, 1, 1},
        {0, 1, 1},
    };
    vector<size_t> indices = {
        0, 1,    1, 2,    2, 3,    3, 0,    4, 5,    5, 6,
        6, 7,    7, 4,    0, 4,    1, 5,    2, 6,    3, 7
    };
    Elements<Lines> Le{indices};

    //mat global = translate(-2,-2,0); // usada para o personagem todo, todas as models começam com ela. Global*Model

    vector<mat4> m = {
    ///Cabeça
    translate(0.75,6,-0.25)*scale(2.5,2.5,2.5),

    ///Corpo
    scale(4,6,2),

    ///Braço direito
    translate(4,2, 0.375)*scale(1.25,3,1.25),

    ///Braço esquerdo
    translate(-1.25, 2, 0.375)*scale(1.25,3,1.25),

    ///Ante-Braço direito
    rotacao(4,-1.75,(1.25+0.375),-0.3,'x')*translate(4, -1.75, 0.375)*scale(1.25,4,1.25),

    ///Ante-Braço esquerdo
    rotacao(4,-1.75,(1.25+0.375),-0.3,'x')*translate(-1.25, -1.75, 0.375)*scale(1.25,4,1.25),

    ///Perna esquerda
    translate(0.5,-2.75,0.375)*scale(1.25,3,1.25),

    ///Perna direita
    translate(2.25,-2.75,0.375)*scale(1.25,3,1.25),

    ///Canela esquerda
    translate(0.5,-6.5,0.375)*scale(1.25,4,1.25),

    ///Canela direita
    translate(2.25,-6.5,0.375)*scale(1.25,4,1.25)
    };


    Color c = blue;

    ///Visão Frontal
    //mat4 View = lookAt({0, 0, 10}, {0, 0, 0}, {0, 1, 0});

    ///Visão lateral
    mat4 View = lookAt({10, 0, 0}, {0, 0, 0}, {0, 1, 0});

    mat4 Projection = orthogonal(-10, 10, -10, 10, -10, 10);

    Graphics3D G{600, 600};
    G.clear();

    for(int i=0; i<m.size(); i++){
        SimpleShader::M = Projection*View*m[i];
        SimpleShader::C = c;
        G.draw<SimpleShader::Varying>(V, Le);
    }


    G.savePNG("output.png");

}
